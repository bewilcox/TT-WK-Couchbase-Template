##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
// This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${entity.name}Key.java", $target.folder, "jpa_bean_pk.vm"  )
#else 
// This Bean has a basic Primary Key (not composite) 
#end
##--- @Transient usage count ( number of xxxToMany links ) 
#set ( $TRANSIENT_COUNT = 0 )
#foreach( $link in $entity.selectedLinks )
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() )
#set ( $TRANSIENT_COUNT = $TRANSIENT_COUNT + 1 )
#end
#end

package ${target.javaPackageFromFolder($SRC)};

import java.io.Serializable;

#foreach( $import in $entity.imports )
import $import;
#end

#foreach( $import in $entity.importsJpa )
import $import;
#end
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
#if (  $TRANSIENT_COUNT > 0 ) 
import javax.xml.bind.annotation.XmlTransient;
#end

/**
 * POJO class for "${entity.databaseTable}" documents.
 *
 * @author Telosys Tools Generator
 *
 */
@XmlRootElement  // JAXB annotation for REST Web Services
@XmlAccessorType(XmlAccessType.PROPERTY) // JAXB accessor = getter/setter pair
public class $entity.name implements Serializable
{
    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // DOCUMENT PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private ${entity.name}Key compositePrimaryKey ;

#else 
    //----------------------------------------------------------------------
    // DOCUMENT PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
    private $field.formatedType(4) $field.formatedName(1) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

#end

    //----------------------------------------------------------------------
    // DOCUMENT DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
## $field.jpaAnnotations(4)
##     private $field.formatedType(10) $field.formatedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
##     
## #else
##     // "$field.name" (column "$field.databaseName") is not mapped as an attribute because it is used in a link   
##     
## #end
    private $field.formatedType(4) $field.formatedName(1) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end
#foreach( $field in $linkFields )
	// "$field.name" (column "$field.databaseName") is not defined by itself because used as FK in a link 
#end


    //----------------------------------------------------------------------
    // DOCUMENT LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
#set($idPrefix = "")
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#if($link.isFetchEAGER())
    // Eager like fetching, the document store all the datas of the link.
#set($linkType = $link.formatedType(1))
#else
#set($idPrefix = "Id")
    // Lazy like fetching, the document store the reference id of the link.
#set($linkType = "String")
#end
#elseif($link.isCardinalityOneToMany() || $link.isCardinalityManyToMany())
#if($link.isFetchEAGER())
    // Eager like fetching, the document store all the datas of the link.
#set($linkType = $link.formatedType(1))
#else
#set($idPrefix = "Id")
    // Lazy like fetching, the document store the reference id of the link.
#set($linkType = "$link.javaTypeShort<String>")
#end
#end
    private $linkType $link.formatedName(0)$idPrefix;
#end

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ${entity.name}()
    {
		super();
#if ( $entity.hasCompositePrimaryKey() )        
		this.compositePrimaryKey = new ${entity.name}Key();       
#end
    }
    
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
##	public ${entity.name}Key getKey() {
##        return key;
##    }
## 
##    public void setKey(${entity.name}Key key) {
##        this.key = key;
##    }
##
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.compositePrimaryKey.${field.setter}( $field.name ) ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.compositePrimaryKey.${field.getter}() ;
    }
#end
#end

#else 
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end
#end
#end

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
#if ( $field.databaseName )
#end
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end

## #end  
#end  

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
#foreach( $link in $entity.selectedLinks )
#set($idPrefix = "")
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#if($link.isFetchEAGER())
    // Eager like fetching, the document store all the datas of the link.
#set($linkType = $link.formatedType(1))
#else
#set($idPrefix = "Id")
    // Lazy like fetching, the document store the reference id of the link.
#set($linkType = "String")
#end
#elseif($link.isCardinalityOneToMany() || $link.isCardinalityManyToMany())
#if($link.isFetchEAGER())
    // Eager like fetching, the document store all the datas of the link.
#set($linkType = $link.formatedType(1))
#else
#set($idPrefix = "Id")
    // Lazy like fetching, the document store the reference id of the link.
#set($linkType = "$link.javaTypeShort<String>")
#end
#end
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() ) 
    @XmlTransient
#end
#if ( $link.setter )    public void ${link.setter}$idPrefix ( $linkType ${link.javaName}$idPrefix  )
    {
        this.${link.javaName}$idPrefix = ${link.javaName}$idPrefix;
    }
#end
#if ( $link.getter )    public $linkType ${link.getter}$idPrefix ()
    {
        return this.${link.javaName}$idPrefix;
    }
#end

#end  

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString()
    {
#set( $attributes = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_TEXT, $const.NOT_IN_SELECTED_LINKS ) )    
$entity.toStringMethodCodeLinesWithKey(8, $attributes, "compositePrimaryKey") 
## The "key" is used only if composite key
#foreach( $field in $entity.getAttributesByCriteria( $const.TEXT ) )
		// $field.name is not in toString because it's a "long text" field
#end  
    }

}
